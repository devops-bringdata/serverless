service: bringdata-serverless
frameworkVersion: '2'
org: bringdata
app: bringdata-serverless
custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules:
      forceInclude:
        - pg
        - aws-sdk
  serverless-offline:
    httpPort: 3006
  vpc:
    production:
      securityGroupIds:
        - sg-033afd581a289817f
      subnetIds:
        - subnet-0c0e0bea929fe16d3
        - subnet-071d88f0907454f2a
        - subnet-052ca465572fe5620
    staging:
      securityGroupIds:
        - sg-0b23f4711ab21127c
      subnetIds:
        - subnet-04019329298c75baf
        - subnet-0f4da0a963853b8df
        - subnet-004712f5be4ccd57f
  vpcId:
    staging: vpc-03a2ecbe2d8d6f8f0
    production: vpc-041c1f841163ba45e
  customEnv:
    DB_HOST:
      development: localhost
      staging: '${ssm:/staging/database/db_host~true}'
      production: '${ssm:/production/database/db_host~true}'
    DB_NAME:
      development: core
      staging: '${ssm:/staging/database/db_name~true}'
      production: '${ssm:/production/database/db_name~true}'
    DB_PASSWORD:
      development: '123456'
      staging: '${ssm:/staging/database/db_password~true}'
      production: '${ssm:/production/database/db_password~true}'
    DB_PORT:
      development: '5432'
      staging: '${ssm:/staging/database/db_port~true}'
      production: '${ssm:/production/database/db_port~true}'
    DB_USERNAME:
      development: postgres
      staging: '${ssm:/staging/database/db_username~true}'
      production: '${ssm:/production/database/db_username~true}'
    JWT_AUTH_SECRET:
      development: 4aa04f57a84d4d1655b7ba575d7f7794
      staging: '${ssm:/staging/external/jwt_auth_secret~true}'
      production: '${ssm:/production/external/jwt_auth_secret~true}'
plugins:
  - serverless-webpack
  - serverless-offline
provider:
  name: aws
  runtime: nodejs12.x
  timeout: 15
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  vpc: ${self:custom.vpc.${opt:stage}}
  region: sa-east-1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    DB_HOST: '${self:custom.customEnv.DB_HOST.${opt:stage}}'
    DB_NAME: '${self:custom.customEnv.DB_NAME.${opt:stage}}'
    DB_PASSWORD: '${self:custom.customEnv.DB_PASSWORD.${opt:stage}}'
    DB_PORT: '${self:custom.customEnv.DB_PORT.${opt:stage}}'
    DB_USERNAME: '${self:custom.customEnv.DB_USERNAME.${opt:stage}}'
    TEST_DATABASE: bringdatajest
    JWT_AUTH_SECRET: '${self:custom.customEnv.JWT_AUTH_SECRET.${opt:stage}}'
    SENDGRID_API_KEY: '${ssm:/staging/external/sendgrid_api_key~true}'
    ENVIRONMENT: '${opt:stage}'
functions:
  createCampaign:
    handler: src/main/routes/campaign-routes.handle
    events:
      - http:
          method: any
          path: campaign
  getRowToEnrich:
    handler: src/main/routes/rows-routes.handle
    events:
      - http:
          method: any
          path: enrichment-row
  getEnrichmentRows:
    handler: src/main/routes/enrichment-routes.handle
    events:
      - http:
          method: any
          path: enrichment-rows
  uploadedBases:
    handler: src/main/routes/uploaded-bases-routes.handle
    events:
      - http:
          method: any
          path: enrichment-uploaded-bases
  downloadEnrichedBase:
    handler: src/main/routes/download-enriched-base.handle
    events:
      - http:
          method: any
          path: download-enriched-base
  chargeCredits:
    handler: src/main/routes/charge-credits.handle
    events:
      - http:
          method: any
          path: charge-credits
  finishValidation:
    handler: src/main/routes/validation-routes.handle
    events:
      - http:
          method: any
          path: finish-group-validation
  validateSingleEmail:
    handler: src/main/routes/validate-single-email.handle
    events:
      - http:
          method: any
          path: validate-single-email
  health:
    handler: src/main/routes/health.handle
    events:
      - http:
          method: get
          path: health
